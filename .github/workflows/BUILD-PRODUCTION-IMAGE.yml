name: Build Production Image

on:
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials for production
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push image to Amazon ECR
        uses: docker/build-push-action@v5
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: main
        with:
          dockerfile: Dockerfile
          context: ./backend
          target: production
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get ASG Desired Count
        id: desired-count
        run: |
          desired_count=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-name algosolved-ec2-asg \
            --query 'AutoScalingGroups[0].DesiredCapacity')
          
          echo "desired-count=${desired_count}" >> $GITHUB_OUTPUT

      - name: Get ASG Instances
        id: asg-instances
        run: |
          running_instances=[]
          running_instances=aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-name algosolved-ec2-asg \
            --query 'AutoScalingGroups[0].Instances[*].InstanceId' \
            --output text | tr -d '[:space:]')
          
          echo "instance-ids=${running_instances}" >> $GITHUB_OUTPUT

      - name: Update ASG Desired Count
        id: update-desired-count
        if: ${{ steps.desired-count.outputs.desired-count > 0 }}
        run: |
          instances=[]
          count=`expr ${{ steps.desired-count.outputs.desired-count }} \* 2`
          aws autoscaling set-desired-capacity \
            --auto-scaling-group-name algosolved-ec2-asg \
            --desired-capacity ${count} \
            --honor-cooldown
          
          instances=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-name algosolved-ec2-asg \
            --query 'AutoScalingGroups[0].Instances[*]' \
            --output text | tr -d '[:space:]')
          
          healthy_count=0
          while [ healthy_count < count ];
          do
            for var in instances
            do
              if [ var['HealthStatus'] == 'Healthy' ]; then
                healthy_count = healthy_count + 1
              fi
            done
            if [ healthy_count == count ]; then
                break
            fi
            sleep 30000
          done

      - name: Delete ASG Instances
        id: asg-count
        if: ${{ steps.desired-count.outputs.desired-count > 0 }}
        run: |
          count=${{ steps.desired-count.outputs.desired-count }}
          aws autoscaling set-desired-capacity \
            --auto-scaling-group-name algosolved-ec2-asg \
            --desired-capacity ${count} \
            --honor-cooldown
