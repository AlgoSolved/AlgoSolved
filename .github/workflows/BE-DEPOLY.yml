name: BE DEPOLY

on:
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  AUTOSCALING_GROUP_NAME: algosolved-ec2-asg

jobs:
  build:
    uses: ./.github/workflows/BUILD-PRODUCTION-IMAGE.yml
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials for production
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get current desired capacity
        id: get-desired-capacity
        run: |
          current_capacity=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${{ env.AUTOSCALING_GROUP_NAME }} --query "AutoScalingGroups[0].DesiredCapacity" --output text)
          echo "::set-output name=current_capacity::$current_capacity"

      - name: Double the desired capacity
        id: scale-up
        run: |
          new_capacity=$((${{ steps.get-desired-capacity.outputs.current_capacity }} * 2))
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name ${{ env.AUTOSCALING_GROUP_NAME }} --desired-capacity $new_capacity
          echo "::set-output name=new_capacity::$new_capacity"
          echo "Scaled up to $new_capacity instances."

      - name: Wait for new instances to become healthy
        id: wait-for-health
        run: |
          new_capacity=${{ steps.scale-up.outputs.new_capacity }}
          while true; do
            healthy_instances=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${{ env.AUTOSCALING_GROUP_NAME }} --query "AutoScalingGroups[0].Instances[?LifecycleState=='InService' && HealthStatus=='Healthy']" --output json | jq length)
            if [ "$healthy_instances" -eq "$new_capacity" ]; then
              echo "All instances are healthy."
              break
            else
              echo "Waiting for instances to become healthy... (currently $healthy_instances/$new_capacity healthy)"
              sleep 30
            fi
          done

      - name: Restore original desired capacity
        run: |
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name ${{ env.AUTOSCALING_GROUP_NAME }} --desired-capacity ${{ steps.get-desired-capacity.outputs.current_capacity }}
          echo "Scaled down to original capacity of ${{ steps.get-desired-capacity.outputs.current_capacity }} instances."
