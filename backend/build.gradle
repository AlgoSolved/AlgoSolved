plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.17'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:2.3.3"
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.batch:spring-batch-integration'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.postgresql:postgresql:42.5.0'
	implementation 'org.flywaydb:flyway-core:5.2.0'
	//runtimeOnly 'org.postgresql:postgresql'

	implementation "me.paulschwarz:spring-dotenv:4.0.0"

	// github api
	implementation 'org.kohsuke:github-api:1.318'

	// bouncey castle
	implementation 'org.bouncycastle:bcprov-jdk18on:1.77'
	implementation 'org.bouncycastle:bcpkix-jdk18on:1.77'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.10.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.10.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.10.5'

	implementation 'com.google.guava:guava:r05'

	// AWS SSM parameter store
	implementation 'io.awspring.cloud:spring-cloud-starter-aws-parameter-store-config:2.3.0'


	compileOnly 'org.projectlombok:lombok'
	developmentOnly "org.springframework.boot:spring-boot-devtools"
	developmentOnly "org.springdoc:springdoc-openapi-ui:1.5.12"
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.instancio:instancio-junit:4.0.0'
	testImplementation 'net.datafaker:datafaker:2.1.0'

	// dotenv
	implementation "me.paulschwarz:spring-dotenv:4.0.0"
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events "failed", "passed", "skipped", "standardError","standardOut", "started"
	}
}

task getDeps(type: Copy) {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from configurations.compileClasspath into "libs/"
	from configurations.runtimeClasspath into "libs/"
}

task buildAndReload {
	dependsOn build
	mustRunAfter build    // buildAndReload must run after the source files are built into class files using build task
	doLast {
		new File(".", ".restart").text = "${System.currentTimeMillis()}" // update trigger file in root folder for hot reload
	}
}

bootRun {
	String activeProfile = System.properties['spring.profiles.active']
	systemProperty "spring.profiles.active", activeProfile
}
