version: '3.9'

services:
  db:
    container_name: postgresql
    image: postgres:15-alpine
    volumes:
      - ${HOME}/algosolved/data/postgresql:/var/lib/postgresql
    restart: always
    environment:
      POSTGRES_DB: "algosolved"
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_INITDB_ARGS: --encoding=UTF-8
      TZ: Asia/Seoul
    ports:
      - '5432:5432'
    healthcheck:
      test: pg_isready -U postgres -h 127.0.0.1
      interval: 5s
      timeout: 120s
    networks:
      - algosolved-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development # not production
    container_name: backend
    environment:
      - STAGE=development
      - TZ=Asia/Seoul
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - 8080:8080
    restart: always
    volumes:
      - ./backend:/home/deploy/app/backend
    networks:
      - algosolved-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    restart: always
    volumes:
      - ./frontend:/usr/app/frontend

    depends_on:
      - backend
    networks:
      - algosolved-network

  redis:
    image: bitnami/redis:7.2.4
    container_name: algosolved-redis
    restart: always
    environment:
      - ALLOW_EMPTY_PASSWORD=no
      - REDIS_PASSWORD="algosolved$63"
    volumes:
      - ./redis-data:/bitnami/redis/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  algosolved-network:
    driver: bridge
